// Jenkinsfile_parameterized
pipeline {

    agent any

    parameters {
        // This parameter allows you to select a Git branch from the UI
        // Requires the "Git Parameter Plugin" to be installed and Jenkins restarted if recently installed.
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'origin/main', name: 'BRANCH', type: 'PT_BRANCH' // Changed defaultValue to 'main' for common practice

        // Boolean parameters to control pipeline stages
        booleanParam(defaultValue: true, description: 'Check to perform Maven build', name: 'mvn_build')
        booleanParam(defaultValue: true, description: 'Check to publish artifact to Nexus', name: 'publish_to_nexus')
        booleanParam(defaultValue: false, description: 'Check to deploy artifact to Tomcat', name: 'deploy_to_tomcat') // New parameter for Tomcat deployment
    }

    tools {
        // Ensure these names ("Maven3", "Java21") match exactly what's configured
        // in Jenkins > Manage Jenkins > Tools > Maven installations and JDK installations.
        maven "Maven3" // Your specified Maven tool name
        jdk "Java21"   // Your specified Java tool name
    }

    environment {
        // --- Nexus Configuration ---
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "3.93.59.77:8081/" // Your specified Nexus URL
        NEXUS_REPOSITORY = "codeit-helloworld-releases" // Your specified Nexus repository name
        NEXUS_CREDENTIAL_ID = "nexus-deploy-credentials" // Your specified Nexus credential ID

        // --- Tomcat Configuration ---
        TOMCAT_URL = "44.211.225.91:8080" // Base URL for Tomcat (without manager/html)
        TOMCAT_MANAGER_PATH = "/manager/text/deploy" // Path for deploying WAR files
        TOMCAT_CONTEXT_PATH = "/spring3" // Context path for your application on Tomcat
        TOMCAT_MANAGER_CREDENTIAL_ID = "tomcat-manager-credentials" // Your specified Tomcat credential ID

        // --- Slack Configuration ---
        SLACK_CHANNEL = "#team" // Set your desired Slack channel (e.g., #devops, #jenkins-notifications)
        SLACK_CREDENTIAL_ID = "slack-token" // Your specified Slack credential ID
    }

    stages {
        // Removed the explicit "Clone Code" stage and 'git' step here.
        // The SCM configuration in the Jenkins job definition (Pipeline section)
        // handles the initial cloning of the repository based on the 'BRANCH' parameter
        // before any stages start. This avoids the "Couldn't find any revision to build" error.
        stage("Initialize Workspace") {
            steps {
                script {
                    echo "Workspace initialized. Code for branch '${params.BRANCH}' is already checked out by Jenkins's SCM configuration."
                }
            }
        }

        stage("Maven Build") {
            when {
                expression { params.mvn_build == true }
            }
            steps {
                script {
                    echo "Performing Maven build using Java ${tool 'Java21'} and Maven ${tool 'Maven3'}..."
                    // Using just 'mvn' assumes Maven is correctly set up via 'tools' directive and added to PATH.
                    // The -Dmaven.test.failure.ignore argument allows the build to continue even if tests fail.
                    sh 'mvn -Dmaven.test.failure.ignore clean package'
                }
            }
        }

        stage("Publish to Nexus") {
            when {
                expression { params.publish_to_nexus == true }
            }
            steps {
                script {
                    echo "Attempting to publish artifact to Nexus repository: ${NEXUS_REPOSITORY}..."
                    pom = readMavenPom file: "pom.xml"; // This line requires Pipeline Utility Steps Plugin
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");

                    if(filesByGlob.length > 0) {
                        artifactPath = filesByGlob[0].path;
                        artifactExists = fileExists artifactPath;

                        if(artifactExists) {
                            echo "*** Artifact Found: ${artifactPath}, Group: ${pom.groupId}, Packaging: ${pom.packaging}, Version: ${pom.version}";

                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: pom.groupId,
                                version: "${pom.version}-${BUILD_NUMBER}", // Using original version + Jenkins BUILD_NUMBER for uniqueness
                                repository: NEXUS_REPOSITORY,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    [artifactId: pom.artifactId,
                                     classifier: '',
                                     file: artifactPath,
                                     type: pom.packaging],
                                    [artifactId: pom.artifactId,
                                     classifier: '',
                                     file: "pom.xml",
                                     type: "pom"]
                                ]
                            );
                            echo "Artifact published successfully to Nexus!"
                        } else {
                            error "*** Error: Built artifact file '${artifactPath}' could not be found."
                        }
                    } else {
                        error "*** Error: No artifact found in 'target/' directory with packaging type '${pom.packaging}'."
                    }
                }
            }
        }

        stage("Deploy to Tomcat") {
            when {
                expression { params.deploy_to_tomcat == true }
            }
            steps {
                script {
                    echo "Attempting to deploy artifact to Tomcat at ${TOMCAT_URL}${TOMCAT_MANAGER_PATH}..."
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");

                    if(filesByGlob.length > 0) {
                        artifactPath = filesByGlob[0].path;
                        artifactExists = fileExists artifactPath;

                        if(artifactExists) {
                            // Get Tomcat manager credentials
                            withCredentials([usernamePassword(credentialsId: TOMCAT_MANAGER_CREDENTIAL_ID, passwordVariable: 'TOMCAT_PASSWORD', usernameVariable: 'TOMCAT_USERNAME')]) {
                                // Use curl to deploy the WAR file to Tomcat Manager
                                // The '&update=true' parameter ensures the existing application is updated if it already exists
                                sh "curl -u ${TOMCAT_USERNAME}:${TOMCAT_PASSWORD} --upload-file ${artifactPath} \"http://${TOMCAT_URL}${TOMCAT_MANAGER_PATH}?path=${TOMCAT_CONTEXT_PATH}&update=true\""
                                echo "Deployment command executed. Check Tomcat logs for status."
                            }
                        } else {
                            error "*** Error: Built artifact file '${artifactPath}' could not be found for Tomcat deployment."
                        }
                    } else {
                        error "*** Error: No artifact found in 'target/' directory for Tomcat deployment."
                    }
                }
            }
        }
    }

    // Post-build actions for notifications
    post {
        always {
            // This block runs regardless of the build status (success, failure, aborted, etc.)
            echo "Pipeline finished. Sending Slack notification..."
            slackSend(
                channel: SLACK_CHANNEL,
                color: '#CCCC00', // Yellow for "always" status
                message: "Project: ${env.JOB_NAME}\nBuild: ${env.BUILD_NUMBER} (${env.BUILD_URL}) finished. Status: ${currentBuild.currentResult}"
            )
        }
        success {
            // This block runs only if the pipeline successfully completes
            echo "Pipeline succeeded. Sending Slack success notification..."
            slackSend(
                channel: SLACK_CHANNEL,
                color: '#00FF00', // Green for success
                message: "Project: ${env.JOB_NAME}\nBuild: ${env.BUILD_NUMBER} (${env.BUILD_URL}) *SUCCEEDED*! :rocket:"
            )
        }
        failure {
            // This block runs only if the pipeline fails
            echo "Pipeline failed. Sending Slack failure notification..."
            slackSend(
                channel: SLACK_CHANNEL,
                color: '#FF0000', // Red for failure
                message: "Project: ${env.JOB_NAME}\nBuild: ${env.BUILD_NUMBER} (${env.BUILD_URL}) *FAILED*! :fire:"
            )
        }
    }
}
